{"version":3,"file":"static/js/5198.74f8521c.chunk.js","mappings":"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","sources":["../node_modules/react-fast-compare/index.js","../node_modules/react-snowfall/src/Snowfall.tsx","../node_modules/react-snowfall/src/Snowflake.ts","../node_modules/react-snowfall/src/config.ts","../node_modules/react-snowfall/src/hooks.ts","../node_modules/react-snowfall/src/utils.ts"],"sourcesContent":["/* global Map:readonly, Set:readonly, ArrayBuffer:readonly */\n\nvar hasElementType = typeof Element !== 'undefined';\nvar hasMap = typeof Map === 'function';\nvar hasSet = typeof Set === 'function';\nvar hasArrayBuffer = typeof ArrayBuffer === 'function' && !!ArrayBuffer.isView;\n\n// Note: We **don't** need `envHasBigInt64Array` in fde es6/index.js\n\nfunction equal(a, b) {\n  // START: fast-deep-equal es6/index.js 3.1.3\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n    // START: Modifications:\n    // 1. Extra `has<Type> &&` helpers in initial condition allow es6 code\n    //    to co-exist with es5.\n    // 2. Replace `for of` with es5 compliant iteration using `for`.\n    //    Basically, take:\n    //\n    //    ```js\n    //    for (i of a.entries())\n    //      if (!b.has(i[0])) return false;\n    //    ```\n    //\n    //    ... and convert to:\n    //\n    //    ```js\n    //    it = a.entries();\n    //    while (!(i = it.next()).done)\n    //      if (!b.has(i.value[0])) return false;\n    //    ```\n    //\n    //    **Note**: `i` access switches to `i.value`.\n    var it;\n    if (hasMap && (a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!equal(i.value[1], b.get(i.value[0]))) return false;\n      return true;\n    }\n\n    if (hasSet && (a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      it = a.entries();\n      while (!(i = it.next()).done)\n        if (!b.has(i.value[0])) return false;\n      return true;\n    }\n    // END: Modifications\n\n    if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    // START: Modifications:\n    // Apply guards for `Object.create(null)` handling. See:\n    // - https://github.com/FormidableLabs/react-fast-compare/issues/64\n    // - https://github.com/epoberezkin/fast-deep-equal/issues/49\n    if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === 'function' && typeof b.valueOf === 'function') return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString && typeof a.toString === 'function' && typeof b.toString === 'function') return a.toString() === b.toString();\n    // END: Modifications\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    // END: fast-deep-equal\n\n    // START: react-fast-compare\n    // custom handling for DOM elements\n    if (hasElementType && a instanceof Element) return false;\n\n    // custom handling for React/Preact\n    for (i = length; i-- !== 0;) {\n      if ((keys[i] === '_owner' || keys[i] === '__v' || keys[i] === '__o') && a.$$typeof) {\n        // React-specific: avoid traversing React elements' _owner\n        // Preact-specific: avoid traversing Preact elements' __v and __o\n        //    __v = $_original / $_vnode\n        //    __o = $_owner\n        // These properties contain circular references and are not needed when\n        // comparing the actual elements (and not their owners)\n        // .$$typeof and ._store on just reasonable markers of elements\n\n        continue;\n      }\n\n      // all other properties should be traversed as usual\n      if (!equal(a[keys[i]], b[keys[i]])) return false;\n    }\n    // END: react-fast-compare\n\n    // START: fast-deep-equal\n    return true;\n  }\n\n  return a !== a && b !== b;\n}\n// end fast-deep-equal\n\nmodule.exports = function isEqual(a, b) {\n  try {\n    return equal(a, b);\n  } catch (error) {\n    if (((error.message || '').match(/stack|recursion/i))) {\n      // warn on circular references, don't crash\n      // browsers give this different errors name and messages:\n      // chrome/safari: \"RangeError\", \"Maximum call stack size exceeded\"\n      // firefox: \"InternalError\", too much recursion\"\n      // edge: \"Error\", \"Out of stack space\"\n      console.warn('react-fast-compare cannot handle circular refs');\n      return false;\n    }\n    // some other error. we should definitely know about these\n    throw error;\n  }\n};\n","import React, { useCallback, useEffect, useRef } from 'react'\r\nimport { targetFrameTime } from './config'\r\nimport { useComponentSize, useSnowfallStyle, useSnowflakes, useDeepMemo } from './hooks'\r\nimport { SnowflakeProps, defaultConfig } from './Snowflake'\r\n\r\nexport interface SnowfallProps extends Partial<SnowflakeProps> {\r\n  /**\r\n   * The number of snowflakes to be rendered.\r\n   *\r\n   * The default value is 150.\r\n   */\r\n  snowflakeCount?: number\r\n  /**\r\n   * Any style properties that will be passed to the canvas element.\r\n   */\r\n  style?: React.CSSProperties\r\n}\r\n\r\nconst Snowfall = ({\r\n  color = defaultConfig.color,\r\n  changeFrequency = defaultConfig.changeFrequency,\r\n  radius = defaultConfig.radius,\r\n  speed = defaultConfig.speed,\r\n  wind = defaultConfig.wind,\r\n  rotationSpeed = defaultConfig.rotationSpeed,\r\n  snowflakeCount = 150,\r\n  images,\r\n  style,\r\n}: SnowfallProps = {}): JSX.Element => {\r\n  const mergedStyle = useSnowfallStyle(style)\r\n\r\n  const canvasRef = useRef<HTMLCanvasElement>(null)\r\n  const canvasSize = useComponentSize(canvasRef)\r\n  const animationFrame = useRef(0)\r\n\r\n  const lastUpdate = useRef(Date.now())\r\n  const config = useDeepMemo<SnowflakeProps>({ color, changeFrequency, radius, speed, wind, rotationSpeed, images })\r\n  const snowflakes = useSnowflakes(canvasRef, snowflakeCount, config)\r\n\r\n  const render = useCallback(\r\n    (framesPassed = 1) => {\r\n      const canvas = canvasRef.current\r\n      if (canvas) {\r\n        // Update the positions of the snowflakes\r\n        snowflakes.forEach((snowflake) => snowflake.update(canvas, framesPassed))\r\n\r\n        // Render them if the canvas is available\r\n        const ctx = canvas.getContext('2d')\r\n        if (ctx) {\r\n          ctx.setTransform(1, 0, 0, 1, 0, 0)\r\n          ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight)\r\n\r\n          snowflakes.forEach((snowflake) => snowflake.draw(ctx))\r\n        }\r\n      }\r\n    },\r\n    [snowflakes],\r\n  )\r\n\r\n  const loop = useCallback(() => {\r\n    // Update based on time passed so that a slow frame rate won't slow down the snowflake\r\n    const now = Date.now()\r\n    const msPassed = Date.now() - lastUpdate.current\r\n    lastUpdate.current = now\r\n\r\n    // Frames that would have passed if running at 60 fps\r\n    const framesPassed = msPassed / targetFrameTime\r\n\r\n    render(framesPassed)\r\n\r\n    animationFrame.current = requestAnimationFrame(loop)\r\n  }, [render])\r\n\r\n  useEffect(() => {\r\n    loop()\r\n    return () => cancelAnimationFrame(animationFrame.current)\r\n  }, [loop])\r\n\r\n  return (\r\n    <canvas\r\n      ref={canvasRef}\r\n      height={canvasSize.height}\r\n      width={canvasSize.width}\r\n      style={mergedStyle}\r\n      data-testid=\"SnowfallCanvas\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default Snowfall\r\n","import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement } from './utils'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...wind),\r\n      nextWind: random(...speed),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(canvas: HTMLCanvasElement, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (canvas.offsetWidth + radius * 2)\r\n    if (this.params.x > canvas.offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (canvas.offsetHeight + radius * 2)\r\n    if (this.params.y > canvas.offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  public draw(ctx: CanvasRenderingContext2D): void {\r\n    if (this.image) {\r\n      // ctx.save()\r\n      // ctx.translate(this.params.x, this.params.y)\r\n      ctx.setTransform(1, 0, 0, 1, this.params.x, this.params.y)\r\n\r\n      const radius = Math.ceil(this.params.radius)\r\n      ctx.rotate((this.params.rotation * Math.PI) / 180)\r\n      ctx.drawImage(\r\n        this.getImageOffscreenCanvas(this.image, radius),\r\n        -Math.ceil(radius / 2),\r\n        -Math.ceil(radius / 2),\r\n        radius,\r\n        radius,\r\n      )\r\n\r\n      // ctx.restore()\r\n    } else {\r\n      ctx.beginPath()\r\n      ctx.arc(this.params.x, this.params.y, this.params.radius, 0, 2 * Math.PI)\r\n      ctx.fillStyle = this.config.color\r\n      ctx.closePath()\r\n      ctx.fill()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n","export const snowfallBaseStyle: React.CSSProperties = {\r\n  pointerEvents: 'none',\r\n  backgroundColor: 'transparent',\r\n  position: 'absolute',\r\n  top: 0,\r\n  left: 0,\r\n  width: '100%',\r\n  height: '100%',\r\n}\r\n\r\n// Target of 60 frames per second\r\nexport const targetFrameTime = 1000 / 60\r\n","import { useCallback, useLayoutEffect, useEffect, useRef, useState, useMemo } from 'react'\r\nimport isEqual from 'react-fast-compare'\r\nimport Snowflake, { SnowflakeConfig } from './Snowflake'\r\nimport { snowfallBaseStyle } from './config'\r\nimport { getSize } from './utils'\r\n\r\n/**\r\n * A utility function to create a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nconst createSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n): Snowflake[] => {\r\n  if (!canvasRef.current) return []\r\n\r\n  const snowflakes: Snowflake[] = []\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    snowflakes.push(new Snowflake(canvasRef.current, config))\r\n  }\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * A utility hook to manage creating and updating a collection of snowflakes\r\n * @param canvasRef A ref to the canvas element\r\n * @param amount The number of snowflakes\r\n * @param config The configuration for each snowflake\r\n */\r\nexport const useSnowflakes = (\r\n  canvasRef: React.RefObject<HTMLCanvasElement>,\r\n  amount: number,\r\n  config: SnowflakeConfig,\r\n) => {\r\n  const [snowflakes, setSnowflakes] = useState<Snowflake[]>([])\r\n\r\n  // Handle change of amount\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) => {\r\n      const sizeDifference = amount - snowflakes.length\r\n\r\n      if (sizeDifference > 0) {\r\n        return [...snowflakes, ...createSnowflakes(canvasRef, sizeDifference, config)]\r\n      }\r\n\r\n      if (sizeDifference < 0) {\r\n        return snowflakes.slice(0, amount)\r\n      }\r\n\r\n      return snowflakes\r\n    })\r\n  }, [amount, canvasRef, config])\r\n\r\n  // Handle change of config\r\n  useEffect(() => {\r\n    setSnowflakes((snowflakes) =>\r\n      snowflakes.map((snowflake) => {\r\n        snowflake.updateConfig(config)\r\n        return snowflake\r\n      }),\r\n    )\r\n  }, [config])\r\n\r\n  return snowflakes\r\n}\r\n\r\n/**\r\n * Returns the height and width of a HTML element, uses the `ResizeObserver` api if available to detect changes to the\r\n * size. Falls back to listening for resize events on the window.\r\n * @param ref A ref to the HTML element to be measured\r\n */\r\nexport const useComponentSize = (ref: React.RefObject<HTMLElement>) => {\r\n  const [size, setSize] = useState(getSize(ref.current))\r\n\r\n  const resizeHandler = useCallback(() => {\r\n    if (ref.current) {\r\n      setSize(getSize(ref.current))\r\n    }\r\n  }, [ref])\r\n\r\n  useLayoutEffect(() => {\r\n    const { ResizeObserver } = window\r\n\r\n    if (!ref.current) return\r\n    resizeHandler()\r\n\r\n    if (typeof ResizeObserver === 'function') {\r\n      const resizeObserver = new ResizeObserver(resizeHandler)\r\n      resizeObserver.observe(ref.current)\r\n\r\n      return () => resizeObserver.disconnect()\r\n    } else {\r\n      window.addEventListener('resize', resizeHandler)\r\n\r\n      return () => window.removeEventListener('resize', resizeHandler)\r\n    }\r\n  }, [ref, resizeHandler])\r\n\r\n  return size\r\n}\r\n\r\n/**\r\n * Utility hook that merges any provided styles with the default styles\r\n * @param overrides The style prop passed into the component\r\n */\r\nexport const useSnowfallStyle = (overrides?: React.CSSProperties): React.CSSProperties => {\r\n  const styles = useMemo(\r\n    () => ({\r\n      ...snowfallBaseStyle,\r\n      ...(overrides || {}),\r\n    }),\r\n    [overrides],\r\n  )\r\n\r\n  return styles\r\n}\r\n\r\n/**\r\n * Same as `React.useEffect` but uses a deep comparison on the dependency array. This should only\r\n * be used when working with non-primitive dependencies.\r\n *\r\n * @param effect Effect callback to run\r\n * @param deps Effect dependencies\r\n */\r\nexport function useDeepCompareEffect(effect: React.EffectCallback, deps: React.DependencyList) {\r\n  const ref = useRef<React.DependencyList>(deps)\r\n\r\n  // Only update the current dependencies if they are not deep equal\r\n  if (!isEqual(deps, ref.current)) {\r\n    ref.current = deps\r\n  }\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  return useEffect(effect, ref.current)\r\n}\r\n\r\n/**\r\n * Utility hook to stabilize a reference to a value, the returned value will always match the input value\r\n * but (unlike an inline object) will maintain [SameValueZero](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n * equality until a change is made.\r\n *\r\n * @example\r\n *\r\n * const obj = useDeepMemo({ foo: 'bar', bar: 'baz' }) // <- inline object creation\r\n * const prevValue = usePrevious(obj) // <- value from the previous render\r\n * console.log(obj === prevValue) // <- always logs true until value changes\r\n */\r\nexport function useDeepMemo<T>(value: T): T {\r\n  const [state, setState] = useState(value)\r\n\r\n  useDeepCompareEffect(() => setState(value), [value])\r\n\r\n  return state\r\n}\r\n","/**\r\n * Enhanced random function, selects a random value between a minimum and maximum. If the values provided are both\r\n * integers then the number returned will be an integer, otherwise the return number will be a decimal.\r\n * @param min The minimum value\r\n * @param max The maximum value\r\n */\r\nexport function random(min: number, max: number): number {\r\n  const randomNumber = Math.random() * (max - min + 1) + min\r\n\r\n  if (!Number.isInteger(min) || !Number.isInteger(max)) {\r\n    return randomNumber\r\n  } else {\r\n    return Math.floor(randomNumber)\r\n  }\r\n}\r\n\r\n/**\r\n * Linear interpolation function to gradually step towards a target value\r\n * @param start The current value\r\n * @param end The target value\r\n * @param normal The rate of change between 0 and 1 (0 = no change, 1 = instant)\r\n */\r\nexport function lerp(start: number, end: number, normal: number) {\r\n  return (1 - normal) * start + normal * end\r\n}\r\n\r\n/**\r\n * Gets the height and width of the provided HTML element\r\n * @param element The html element to measure\r\n */\r\nexport function getSize(element?: HTMLElement | null) {\r\n  if (!element) return { height: 0, width: 0 }\r\n\r\n  return {\r\n    height: element.offsetHeight,\r\n    width: element.offsetWidth,\r\n  }\r\n}\r\n\r\n/**\r\n * Selects a random item from an array of inputs.\r\n *\r\n * @param items The array of items to choose from\r\n * @returns A random item selected from the array\r\n */\r\nexport function randomElement<T>(items: T[]): T {\r\n  const index = Math.floor(Math.random() * items.length)\r\n  return items[index]\r\n}\r\n"],"names":["hasElementType","Element","hasMap","Map","hasSet","Set","hasArrayBuffer","ArrayBuffer","isView","equal","a","b","constructor","length","i","keys","it","Array","isArray","size","entries","next","done","has","value","get","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","$$typeof","module","exports","error","message","match","console","warn","_react","_interopRequireWildcard","require","_config","_hooks","_Snowflake","_ref","arguments","undefined","_ref$color","color","defaultConfig","_ref$changeFrequency","changeFrequency","_ref$radius","radius","_ref$speed","speed","_ref$wind","wind","_ref$rotationSpeed","rotationSpeed","_ref$snowflakeCount","snowflakeCount","images","style","mergedStyle","useSnowfallStyle","canvasRef","useRef","canvasSize","useComponentSize","animationFrame","lastUpdate","Date","now","config","useDeepMemo","snowflakes","useSnowflakes","render","useCallback","framesPassed","canvas","current","forEach","snowflake","update","ctx","getContext","setTransform","clearRect","offsetWidth","offsetHeight","draw","loop","msPassed","targetFrameTime","requestAnimationFrame","useEffect","cancelAnimationFrame","createElement","ref","height","width","_reactFastCompare","_utils","Snowflake","_classCallCheck","_defineProperty","this","updateConfig","_this$config","params","x","random","y","rotation","apply","_toConsumableArray","nextSpeed","nextWind","nextRotationSpeed","framesSinceLastUpdate","image","randomElement","previousConfig","_objectSpread","selectImage","_this$params","lerp","updateTargetParams","_sizes$size","HTMLImageElement","loading","sizes","offscreenCanvases","set","_canvas$getContext","document","drawImage","Math","ceil","rotate","PI","getImageOffscreenCanvas","beginPath","arc","fillStyle","closePath","fill","WeakMap","pointerEvents","backgroundColor","position","top","left","_useState6","_slicedToArray","useState","state","setState","useDeepCompareEffect","_interopRequireDefault","amount","_useState2","setSnowflakes","sizeDifference","concat","push","createSnowflakes","slice","map","_useState4","getSize","setSize","resizeHandler","useLayoutEffect","ResizeObserver","window","resizeObserver","observe","disconnect","addEventListener","removeEventListener","effect","deps","overrides","useMemo","snowfallBaseStyle","element","start","end","normal","min","max","randomNumber","Number","isInteger","floor","items","index"],"sourceRoot":""}