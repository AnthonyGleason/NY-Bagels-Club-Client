{"version":3,"file":"static/js/5676.334d672d.chunk.js","mappings":"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","sources":["Components/Accounts/ResetPassword/ResetPassword.tsx","Config/clientSettings.ts","Helpers/accounts.tsx","Helpers/verification.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport './ResetPassword.css';\nimport { getResetTokenStatus, handleSubmitForgotPassword } from '../../../Helpers/accounts';\n\nexport default function ResetPassword(){\n  const [passwordInput,setPasswordInput] = useState<string>('');\n  const [passwordConfInput,setPasswordConfInput] = useState<string>('');\n  const [message,setMessage] = useState<string>('');\n  const [isExpired,setIsExpired] = useState<boolean>(false);\n  const resetID = useParams().resetID;\n  const navigate = useNavigate();\n\n  //handle initial load get email, isExpired\n  useEffect(()=>{\n    if (!resetID) return;\n    getResetTokenStatus(resetID,setIsExpired);\n  },[resetID]);\n\n  if (isExpired){\n    return(\n      <div className='pass-expired'>\n        It appears that this password reset link has expired. Please request another password reset to proceed.\n      </div>\n    )\n  }else{\n    return(\n      <div>\n        <form className='pass-reset-form'>\n          <div>\n            <label>New Password</label>\n            <input type='password' value={passwordInput} onChange={(e)=>{setPasswordInput(e.target.value)}} />\n          </div>\n          <div>\n            <label>New Password (again)</label>\n            <input type='password' value={passwordConfInput} onChange={(e)=>{setPasswordConfInput(e.target.value)}} />\n          </div>\n          <div>{message}</div>\n          <button type='button' onClick={()=>{\n            if (!resetID) return;\n            handleSubmitForgotPassword(\n              resetID,\n              passwordInput,\n              passwordConfInput,\n              setIsExpired,\n              navigate,\n              setMessage\n            )\n          }}>Submit</button>\n        </form>\n      </div>\n    );\n  }\n};","const USE_LOCALHOST:boolean = false; //FALSE FOR PRODUCTION\n\nexport const IS_MAINTENANCE_MODE:boolean = false;\nexport const HOME_LOADING_DELAY:number= 4000 //in milliseconds\n\nexport const getServerUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:5000');\n  }else{\n    return('https://nybc-server-f069d08697f3.herokuapp.com');\n  };\n};\n\nexport const getClientUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:3000');\n  }else{\n    return('https://nybagelsclub.com/')\n  };\n};\nexport const CHECKOUT_SUCCESS_REDIRECT_URL:string = `${getServerUrlPrefix()}/cart/checkout/success`;","import { getServerUrlPrefix } from \"../Config/clientSettings\";\nimport { isValidEmail } from \"./verification\";\n\nexport const fetchAccountSettings = async function(\n  setFirstNameInput?:Function,\n  setLastNameInput?:Function,\n  setEmailInput?:Function\n):Promise<void>{\n  try{\n    //ensure the user is logged in\n    const loginToken:string | null = localStorage.getItem('loginToken');\n    if (!loginToken) throw new Error('A login token was not provided! Are you logged in?');\n\n    //make the request for the user account settings\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    \n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to fetch account settings');\n    };\n\n    const responseData = await response.json();\n\n    //set the appropriate inputs if they were provided \n    if (setFirstNameInput) setFirstNameInput(responseData.firstName);\n    if (setLastNameInput) setLastNameInput(responseData.lastName);\n    if (setEmailInput) setEmailInput(responseData.email);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const applySettingsChanges = async function(\n  firstNameInput:string,\n  lastNameInput:string,\n  emailInput:string,\n  passwordInput:string,\n  passwordConfInput:string,\n  currentPasswordInput:string,\n  navigate:Function\n){\n  try{\n    //required inputs were not provided\n    if (\n      !firstNameInput || \n      !lastNameInput ||\n      !emailInput ||\n      !currentPasswordInput\n    ) throw new Error('The first name, last name, email and current password fields are required.');\n\n    if (\n      !isValidEmail(emailInput)\n    ) throw new Error('The provided email is not a valid email');\n\n    //a new password was provided but it does not match the new password confirmation\n    if (\n      passwordInput &&\n      passwordConfInput &&\n      passwordInput!==passwordConfInput\n    ) throw new Error('New passwords do not match!');\n    \n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        emailInput: emailInput,\n        passwordInput: passwordInput,\n        passwordConfInput: passwordConfInput,\n        currentPasswordInput: currentPasswordInput\n      })\n    });\n\n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to apply new account settings');\n    };\n\n    const responseData = await response.json();\n    \n    if (responseData.wasUserUpdated){\n      //log the user out the user was updated but a new login token wasnt created properly\n      if (!responseData.loginToken){\n        localStorage.removeItem('loginToken');\n        throw new Error('A new login token was not provided!');\n      };\n\n      //otherwise we can safely update the login token with the response data\n      localStorage.setItem('loginToken',responseData.loginToken);\n      navigate('/');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const fetchOrders = async function(setOrders:Function){\n  const loginToken:string | null = localStorage.getItem('loginToken');\n  try{\n    if (!loginToken) throw new Error('A login token was not found! Are you logged in?');\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/orders`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch orders for the current user.');\n    const responseData = await response.json();\n    if (responseData.orders) setOrders(responseData.orders);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const getResetTokenStatus = async function(\n    resetID:string,\n    setIsExpired:Function\n  ){\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'GET'\n    });\n    if (!response.ok) throw new Error('Failed to get password reset token status.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleSubmitForgotPassword = async function(\n    resetID:string,\n    passwordInput:string,\n    passwordConfInput:string,\n    setIsExpired:Function,\n    navigate:any,\n    setMessage:Function\n  ){\n  try{\n    if (!resetID || !passwordInput || !passwordConfInput) throw new Error('Required inputs are missing!');\n    if (passwordInput!==passwordConfInput) throw new Error('Passwords do not match!');\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body:JSON.stringify({\n        password: passwordInput,\n        passwordConf: passwordConfInput\n      })\n    });\n    if (!response.ok) throw new Error('Failed to submit the forgot password form. Please try again later.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n    if (responseData.wasUpdated) navigate('/login');\n    if (!responseData.isExpired) setMessage('Passwords do not match or user does not exist.');\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const genErrorMessageElement = function(errorMessage:string,){\n  //an error does not exist\n  if (!errorMessage) return null;\n  //display error\n  return(\n    <p className='login-error-message'>{errorMessage}</p>\n  );\n};\n\nexport const submitLogin = async function(emailInput:string,passwordInput:string,setErrorMessage:Function,navigate:Function){\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput){\n      const errMessage = '* Please ensure both the email and password fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/login`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n      }),\n    });\n\n    if (!response.ok) throw new Error('Failed to log in user.');\n\n    const responseData = await response.json();\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      //redirect user back to the last page they were on\n      // window.history.back();\n      \n      //in the future i would like to have users redirected to certain pages if they are specified in props but for now we will redirect to the home page\n      navigate('/');\n    }else{\n      setErrorMessage(responseData.message);\n      throw new Error(responseData.message);\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleForgotPassword = async function(emailInput:string,setErrorMessage:Function){\n  try{\n    if (!emailInput){\n      const errorMessage:string = '* The email field cannot be left blank.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    if (!isValidEmail(emailInput)){\n      const errorMessage:string = '* Please ensure you have entered a valid email.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput\n      })\n    });\n    \n    if (!response.ok) throw new Error('Failed to request a forgot password email.');\n    const responseData = await response.json();\n    if (responseData.isEmailSent){\n      alert('Your request has been processed. If an account exists for the provided email address you will recieve an email with a password reset link.');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const submitRegister = async function(\n  emailInput:string,\n  passwordInput:string,\n  passwordConfirmInput:string,\n  firstNameInput:string,\n  lastNameInput:string,\n  setErrorMessage:Function,\n  isRequestSent:boolean,\n  setIsRequestSent:Function\n){\n  if (isRequestSent) return;\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput || !passwordConfirmInput || !firstNameInput || !lastNameInput){\n      const errMessage:string = '* Please ensure all fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage:string = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure passwords match\n    if (passwordInput!==passwordConfirmInput){\n      const errMessage:string = '* Entered passwords do not match.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/register`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        email: emailInput,\n        password: passwordInput,\n        passwordConfirm: passwordConfirmInput,\n      })\n    });\n    setIsRequestSent(true);\n    if (!response.ok) throw new Error('An error has occured when registering the new user.');\n\n    const responseData = await response.json();\n\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      setIsRequestSent(true);\n      window.history.back();\n    }else{\n      setErrorMessage(responseData.message);\n      setIsRequestSent(false);\n    };\n    \n  }catch(err){\n    console.log(err);\n  };\n};"," // Custom email validation function\nexport const isValidEmail = (email:string):boolean => {\n  // You can use a regular expression to validate the email format\n  const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n  return regex.test(email);\n};"],"names":["ResetPassword","passwordInput","setPasswordInput","useState","passwordConfInput","setPasswordConfInput","message","setMessage","isExpired","setIsExpired","resetID","useParams","navigate","useNavigate","useEffect","getResetTokenStatus","_jsx","className","children","_jsxs","type","value","onChange","e","target","onClick","handleSubmitForgotPassword","IS_MAINTENANCE_MODE","HOME_LOADING_DELAY","getServerUrlPrefix","getClientUrlPrefix","concat","fetchAccountSettings","async","setFirstNameInput","setLastNameInput","setEmailInput","loginToken","localStorage","getItem","Error","response","fetch","method","headers","ok","responseData","json","firstName","lastName","email","err","console","log","applySettingsChanges","firstNameInput","lastNameInput","emailInput","currentPasswordInput","isValidEmail","body","JSON","stringify","wasUserUpdated","removeItem","setItem","password","passwordConf","wasUpdated","genErrorMessageElement","errorMessage","submitLogin","setErrorMessage","errMessage","token","handleForgotPassword","isEmailSent","alert","submitRegister","passwordConfirmInput","isRequestSent","setIsRequestSent","passwordConfirm","window","history","back","test"],"sourceRoot":""}