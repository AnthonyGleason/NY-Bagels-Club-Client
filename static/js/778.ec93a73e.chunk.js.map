{"version":3,"file":"static/js/778.ec93a73e.chunk.js","mappings":"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","sources":["Components/Accounts/AccountSettings/AccountSettings.tsx","Config/clientSettings.ts","Helpers/accounts.tsx","Helpers/auth.ts","Helpers/cart.tsx","Helpers/verification.ts"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { verifyLoginToken } from '../../../Helpers/auth';\nimport './AccountSettings.css';\nimport Sidebar from '../../Sidebar/Sidebar';\nimport { emptyCart, fetchAndHandleCart } from '../../../Helpers/cart';\nimport { Cart } from '../../../Interfaces/interfaces';\nimport { applySettingsChanges, fetchAccountSettings } from '../../../Helpers/accounts';\nimport { useNavigate } from 'react-router-dom';\n\nexport default function AccountSettings(){\n  //form input fields\n  const [firstNameInput,setFirstNameInput] = useState<string>('');\n  const [lastNameInput,setLastNameInput] = useState<string>('');\n  const [emailInput,setEmailInput] = useState<string>('');\n  const [passwordInput,setPasswordInput] = useState<string>('');\n  const [passwordConfInput,setPasswordConfInput] = useState<string>('');\n  const [currentPasswordInput,setCurrentPasswordInput] = useState<string>('');\n\n  const [isSignedIn,setIsSignedIn] = useState<boolean>(true);\n  const [isSidebarExpanded,setIsSidebarExpanded] = useState<boolean>(false);\n  const [cart,setCart] = useState<Cart>(emptyCart);\n  \n  const navigate = useNavigate();\n\n  //handle initial page load \n  useEffect(()=>{\n    verifyLoginToken(setIsSignedIn);\n    fetchAndHandleCart(setCart);\n  },[]);\n\n  useEffect(()=>{\n    fetchAccountSettings(setFirstNameInput,setLastNameInput,setEmailInput);\n  },[isSignedIn]);\n\n  if (isSignedIn){\n    return(\n      <>\n        <Sidebar \n          cart={cart}\n          isExpanded={isSidebarExpanded} \n          setIsExpanded={setIsSidebarExpanded}\n          isSignedIn={isSignedIn}\n          setIsSignedIn={setIsSignedIn}\n        />\n        <div onClick={()=>{setIsSidebarExpanded(isSidebarExpanded===true ? false: false)}} className='account-settings'>\n          <h3>Account Settings</h3>\n          <div className='settings-input-wrapper'>\n            <label>First Name</label>\n            <input value={firstNameInput} onChange={(e)=>{setFirstNameInput(e.target.value)}} type='text' />\n          </div>\n          <div className='settings-input-wrapper'>\n            <label>Last Name</label>\n            <input value={lastNameInput} onChange={(e)=>{setLastNameInput(e.target.value)}} type='text' />\n          </div>\n          <h4>The following setting will change your login email.</h4>\n          <div className='settings-input-wrapper'>\n            <label>Email</label>\n            <input value={emailInput} onChange={(e)=>{setEmailInput(e.target.value)}} type='email' />\n          </div>\n          <h4>The following setting will change your login password.</h4>\n          <div className='settings-input-wrapper'>\n            <label>New Password</label>\n            <input value={passwordInput} onChange={(e)=>{setPasswordInput(e.target.value)}} type='password' />\n          </div>\n          <div className='settings-input-wrapper'>\n            <label>New Password (Again)</label>\n            <input value={passwordConfInput} onChange={(e)=>{setPasswordConfInput(e.target.value)}} type='password' />\n          </div>\n          <h4>You must enter your current password to apply any of the settings changes above.</h4>\n          <div className='settings-input-wrapper'>\n            <label>Current Password</label>\n            <input value={currentPasswordInput} onChange={(e)=>{setCurrentPasswordInput(e.target.value)}} type='password' required/>\n          </div>\n          <button className='apply-account-settings' type='button' onClick={()=>{\n            applySettingsChanges(\n              firstNameInput,\n              lastNameInput,\n              emailInput,\n              passwordInput,\n              passwordConfInput,\n              currentPasswordInput,\n              navigate\n            )\n          }}>Apply Changes</button>\n        </div>\n      </>\n    );\n  }else{\n    return(\n      <>\n        <Sidebar \n          cart={cart}\n          isExpanded={isSidebarExpanded} \n          setIsExpanded={setIsSidebarExpanded}\n          isSignedIn={isSignedIn}\n          setIsSignedIn={setIsSignedIn}\n        />\n        <div onClick={()=>{setIsSidebarExpanded(isSidebarExpanded===true ? false: false)}} className='account-settings-message'>\n          You must be signed in to access this page.\n        </div>\n      </>\n    );\n  };\n};","const USE_LOCALHOST:boolean = false; //FALSE FOR PRODUCTION\n\nexport const IS_MAINTENANCE_MODE:boolean = false;\nexport const HOME_LOADING_DELAY:number= 1800 //in milliseconds\n\nexport const getServerUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:5000');\n  }else{\n    return('https://nybagelsclub-7eb3cdcd8d53.herokuapp.com');\n  };\n};\n\nexport const getClientUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:3000');\n  }else{\n    return('https://anthonygleason.github.io/NY-Bagels-Club-Client')\n  };\n};\nexport const CHECKOUT_SUCCESS_REDIRECT_URL:string = `${getServerUrlPrefix()}/cart/checkout/success`;","import { getServerUrlPrefix } from \"../Config/clientSettings\";\nimport { isValidEmail } from \"./verification\";\n\nexport const fetchAccountSettings = async function(\n  setFirstNameInput?:Function,\n  setLastNameInput?:Function,\n  setEmailInput?:Function\n):Promise<void>{\n  try{\n    //ensure the user is logged in\n    const loginToken:string | null = localStorage.getItem('loginToken');\n    if (!loginToken) throw new Error('A login token was not provided! Are you logged in?');\n\n    //make the request for the user account settings\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    \n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to fetch account settings');\n    };\n\n    const responseData = await response.json();\n\n    //set the appropriate inputs if they were provided \n    if (setFirstNameInput) setFirstNameInput(responseData.firstName);\n    if (setLastNameInput) setLastNameInput(responseData.lastName);\n    if (setEmailInput) setEmailInput(responseData.email);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const applySettingsChanges = async function(\n  firstNameInput:string,\n  lastNameInput:string,\n  emailInput:string,\n  passwordInput:string,\n  passwordConfInput:string,\n  currentPasswordInput:string,\n  navigate:Function\n){\n  try{\n    //required inputs were not provided\n    if (\n      !firstNameInput || \n      !lastNameInput ||\n      !emailInput ||\n      !currentPasswordInput\n    ) throw new Error('The first name, last name, email and current password fields are required.');\n\n    if (\n      !isValidEmail(emailInput)\n    ) throw new Error('The provided email is not a valid email');\n\n    //a new password was provided but it does not match the new password confirmation\n    if (\n      passwordInput &&\n      passwordConfInput &&\n      passwordInput!==passwordConfInput\n    ) throw new Error('New passwords do not match!');\n    \n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        emailInput: emailInput,\n        passwordInput: passwordInput,\n        passwordConfInput: passwordConfInput,\n        currentPasswordInput: currentPasswordInput\n      })\n    });\n\n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to apply new account settings');\n    };\n\n    const responseData = await response.json();\n    \n    if (responseData.wasUserUpdated){\n      //log the user out the user was updated but a new login token wasnt created properly\n      if (!responseData.loginToken){\n        localStorage.removeItem('loginToken');\n        throw new Error('A new login token was not provided!');\n      };\n\n      //otherwise we can safely update the login token with the response data\n      localStorage.setItem('loginToken',responseData.loginToken);\n      navigate('/');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const fetchOrders = async function(setOrders:Function){\n  const loginToken:string | null = localStorage.getItem('loginToken');\n  try{\n    if (!loginToken) throw new Error('A login token was not found! Are you logged in?');\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/orders`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch orders for the current user.');\n    const responseData = await response.json();\n    if (responseData.orders) setOrders(responseData.orders);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const getResetTokenStatus = async function(\n    resetID:string,\n    setIsExpired:Function\n  ){\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'GET'\n    });\n    if (!response.ok) throw new Error('Failed to get password reset token status.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleSubmitForgotPassword = async function(\n    resetID:string,\n    passwordInput:string,\n    passwordConfInput:string,\n    setIsExpired:Function,\n    navigate:any,\n    setMessage:Function\n  ){\n  try{\n    if (!resetID || !passwordInput || !passwordConfInput) throw new Error('Required inputs are missing!');\n    if (passwordInput!==passwordConfInput) throw new Error('Passwords do not match!');\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body:JSON.stringify({\n        password: passwordInput,\n        passwordConf: passwordConfInput\n      })\n    });\n    if (!response.ok) throw new Error('Failed to submit the forgot password form. Please try again later.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n    if (responseData.wasUpdated) navigate('/login');\n    if (!responseData.isExpired) setMessage('Passwords do not match or user does not exist.');\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const genErrorMessageElement = function(errorMessage:string,){\n  //an error does not exist\n  if (!errorMessage) return null;\n  //display error\n  return(\n    <p className='login-error-message'>{errorMessage}</p>\n  );\n};\n\nexport const submitLogin = async function(emailInput:string,passwordInput:string,setErrorMessage:Function,navigate:Function){\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput){\n      const errMessage = '* Please ensure both the email and password fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/login`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n      }),\n    });\n\n    if (!response.ok) throw new Error('Failed to log in user.');\n\n    const responseData = await response.json();\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      //redirect user back to the last page they were on\n      // window.history.back();\n      \n      //in the future i would like to have users redirected to certain pages if they are specified in props but for now we will redirect to the home page\n      navigate('/');\n    }else{\n      setErrorMessage(responseData.message);\n      throw new Error(responseData.message);\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleForgotPassword = async function(emailInput:string,setErrorMessage:Function){\n  try{\n    if (!emailInput){\n      const errorMessage:string = '* The email field cannot be left blank.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    if (!isValidEmail(emailInput)){\n      const errorMessage:string = '* Please ensure you have entered a valid email.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput\n      })\n    });\n    \n    if (!response.ok) throw new Error('Failed to request a forgot password email.');\n    const responseData = await response.json();\n    if (responseData.isEmailSent){\n      alert('Your request has been processed. If an account exists for the provided email address you will recieve an email with a password reset link.');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const submitRegister = async function(\n  emailInput:string,\n  passwordInput:string,\n  passwordConfirmInput:string,\n  firstNameInput:string,\n  lastNameInput:string,\n  setErrorMessage:Function,\n  isRequestSent:boolean,\n  setIsRequestSent:Function\n){\n  if (isRequestSent) return;\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput || !passwordConfirmInput || !firstNameInput || !lastNameInput){\n      const errMessage:string = '* Please ensure all fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage:string = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure passwords match\n    if (passwordInput!==passwordConfirmInput){\n      const errMessage:string = '* Entered passwords do not match.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/register`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        email: emailInput,\n        password: passwordInput,\n        passwordConfirm: passwordConfirmInput,\n      })\n    });\n    setIsRequestSent(true);\n    if (!response.ok) throw new Error('An error has occured when registering the new user.');\n\n    const responseData = await response.json();\n\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      setIsRequestSent(true);\n      window.history.back();\n    }else{\n      setErrorMessage(responseData.message);\n      setIsRequestSent(false);\n    };\n    \n  }catch(err){\n    console.log(err);\n  };\n};","import { getServerUrlPrefix } from \"../Config/clientSettings\";\n\nexport const verifyCartToken = async function(setCart:Function, isClub?:boolean):Promise<boolean>{\n  const cartTokenKey = isClub ? 'clubCartToken' : 'cartToken';\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts/verify`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${localStorage.getItem(cartTokenKey)}`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    if (response.status!==200) throw new Error('No valid cart detected. Either the user does not have a cart token or the token expired.');\n    const responseData = await response.json();\n    setCart(responseData.cart);\n    return responseData.isValid;\n  }catch(err){\n    console.log(err);\n    return false;\n  };\n};\n\nexport const requestCartToken = async function(isClub:boolean){\n  const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts`,{\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/json',\n    },\n    body:JSON.stringify({\n      isClub: isClub\n    })\n  });\n  const responseData = await response.json();\n  if (responseData.cartToken){\n    //return the cart session token\n    return responseData.cartToken;  \n  }\n};\n\nexport const verifyLoginToken = async function(\n  setIsSignedIn?:Function,\n  setIsAdmin?:Function,\n  setUserID?:Function\n):Promise<boolean>{\n  let isValid:boolean = false;\n  //handle no login token is present\n  if (!localStorage.getItem('loginToken')){\n    if (setIsSignedIn) setIsSignedIn(false);\n    if (setIsAdmin) setIsAdmin(false);\n    return false;\n  };\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/verify`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    const responseData = await response.json();\n    //handle 403 unauthorized\n    if (response.ok===false || response.status===403){\n      localStorage.removeItem('loginToken');\n      isValid=false;\n    }else{\n      isValid=responseData.isValid;\n    };\n    if (setIsAdmin && responseData.isAdmin===true) setIsAdmin(true);\n    if (setIsSignedIn) setIsSignedIn(isValid);\n    if (setUserID) setUserID(responseData.userID);\n    return isValid;\n  }catch(err){\n    console.log(err);\n    if (setIsAdmin) setIsAdmin(false);\n    return false;\n  };\n};\n\nexport const handleLogout = async function(setIsSignedIn?:Function){\n  await fetch(`${getServerUrlPrefix()}/api/users/logout`,{\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n    }\n  });\n  if (setIsSignedIn) setIsSignedIn(false);\n  //remove the token locally\n  localStorage.removeItem('loginToken');\n};\n\nexport const getMembershipTier = async function(\n    setMembershipTier?:Function,\n    setRemainingDeliveries?:Function,\n    setExpirationDate?:Function\n  ):Promise<string>{\n  try{\n    if (!localStorage.getItem('loginToken')) throw new Error('You are not signed in');\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/membershipLevel`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    const responseData = await response.json();\n    if (setMembershipTier) setMembershipTier(responseData.membershipLevel);\n    if (setRemainingDeliveries) setRemainingDeliveries(responseData.remainingDeliveries);\n    if (setExpirationDate) setExpirationDate(new Date(responseData.expirationDate).toDateString());\n    return responseData.membershipLevel;\n  }catch(err){\n    console.log('You are not signed in, showing non-member pricing.');\n    if (setMembershipTier) setMembershipTier('Non-Member');\n    return 'Non-Member';\n  };\n};","import { getServerUrlPrefix } from \"../Config/clientSettings\";\nimport { BagelItem, Cart, CartItem, SpreadItem } from \"../Interfaces/interfaces\";\nimport { requestCartToken, verifyCartToken } from \"./auth\";\n\nexport const modifyCart = async function(\n  updatedQuantity:number,\n  itemID:string,\n  setCart:Function,\n  isRequestPending:boolean,\n  setIsRequestPending:Function,\n  selection: string,\n  isClub:boolean\n){\n  let cartTokenKey:string = '';\n  //handle not a club request & checking for undefined since isClub is optional\n  if (isClub===false){\n    cartTokenKey = 'cartToken';\n  }else{\n    cartTokenKey = 'clubCartToken';\n  };\n\n  try{\n    //handle request is already pending limited users to 1 request at a time\n    if (isRequestPending) throw new Error('A request is already pending. Please wait for the current request to complete.');\n    //set request to pending\n    setIsRequestPending(true);\n    if (!itemID || updatedQuantity<0) throw new Error('One or more required inputs were left blank.');\n    if(!cartTokenKey) throw new Error('Your request for a local storage cart token was invalid. Did you provide a isClub value to this function?');\n    //make a request to the server to update quantity for cart\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${localStorage.getItem(cartTokenKey)}`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      },\n      body: JSON.stringify({\n        itemID: itemID,\n        updatedQuantity: updatedQuantity,\n        selection: selection,\n        isClubCart: isClub || undefined\n      })\n    });\n    if (response.status===510){\n      alert('You have reached the maximum allowed quantity for the selected item.');\n    };\n    //if the cart token is invalid request a fresh one and call modifyCart again\n    if (response.status===403){ //BUG WARNING IF 403 IS RETURNED WHEN YOU CANT ADD ANYTHING NEW TO YOUR CLUB CART YOU WILL BE CAUGHT IN AN ENDLESS LOOP OF 403 RESPONSES\n      //request a new cart token\n      localStorage.setItem(cartTokenKey,await requestCartToken(isClub || false));\n      modifyCart(updatedQuantity,itemID,setCart,isRequestPending,setIsRequestPending,selection,isClub);\n    };\n    if (!response.ok) throw new Error('An error occurred in the request to update the cart.');\n    const responseData = await response.json();\n\n    if (responseData.cartToken && responseData.cart){\n      //replace the cartToken in localStorage with the updated cartToken\n      localStorage.setItem(cartTokenKey,responseData.cartToken);\n      //update cart state\n      setCart(responseData.cart);\n    };\n    //allow another request to the server\n    setIsRequestPending(false);\n  }catch(err){\n    setIsRequestPending(false);\n  };\n};\n\nexport const fetchAndHandleCart = async function(setCart:Function,isClub?:boolean){\n  try {\n    const cartTokenKey = isClub ? 'clubCartToken' : 'cartToken';\n    const cartToken: string | null = localStorage.getItem(cartTokenKey);\n    // If a cart token was not found, obtain a fresh one\n    if (!cartToken) {\n      // Request a new cart token\n      localStorage.setItem(cartTokenKey, await requestCartToken(isClub || false));\n    };\n    // If a cart token exists but is invalid\n    if (!await verifyCartToken(setCart,isClub)) { //NOTE THIS VERIFYCART TOKEN IS SETTING A CART\n      localStorage.setItem(cartTokenKey, await requestCartToken(isClub || false));\n      // Because a new cart token was requested, set the cart state back to an empty array\n      setCart([]);\n    };\n  } catch (err) {\n    console.log(err);\n  };  \n};\n\nexport const getUnitPriceFromCartItem = function(storeItem:SpreadItem | BagelItem, selection?:string):number{\n  let price:number = 0;\n  if (storeItem.cat==='bagel' && selection==='two'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.twoPrice;\n  }else if (storeItem.cat==='bagel' && selection==='six'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.sixPrice;\n  }else if (storeItem.cat==='bagel' && selection==='dozen'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.dozenPrice;\n  }else if (storeItem.cat==='spread'){\n    const tempCartItem:SpreadItem = storeItem as SpreadItem;\n    price = tempCartItem.price;\n  };\n  return price;\n};\n\nexport const handleCartItemInputChange = function(\n  e:any,\n  setCartQuantity:Function,\n  cartItem:CartItem,\n  setCart:Function,\n  isRequestPending:boolean,\n  setIsRequestPending:Function,\n  selection: string,\n  isClub:boolean\n){ //accepts an event from an input onChange \n  const newVal: number = parseInt(e.target.value);\n  //we dont want users to accidently delete their cart so lets prevent that\n  if (!newVal) {\n    setCartQuantity('');\n    return ;\n  };\n  modifyCart(\n    newVal,\n    cartItem.itemData._id,\n    setCart,\n    isRequestPending,\n    setIsRequestPending,\n    selection,\n    isClub\n  );\n};\n\nexport const getSelectionName = function(cartItem:CartItem){\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='six') return 'Six Pack(s)';\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='dozen') return \"Baker's Dozen(s)\";\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='two') return 'Two Pack(s)';\n\n  //need to have this first because the current store items without category of spread show \n  if (cartItem.itemData.cat==='spread' && cartItem.selection==='halflb') return '1/2 LB';\n  if (cartItem.itemData.cat==='spread') return 'One Pound';\n  \n  if (cartItem.itemData.cat==='pastry') return 'Six Pack(s)';\n  if (cartItem.itemData.cat==='mystery') return 'Single(s)';\n  return 'N/A';\n};\n\nexport const getCartItemSubtotal = function(cartItem:CartItem):number{\n  return cartItem.quantity * cartItem.unitPriceInDollars;\n};\n\nexport const getItemQuantityFromCart = function(cart:Cart, itemName: string, selection?: string): number {\n  if (!cart || !cart.items) return 0;\n\n  let quantity = 0;\n\n  for (let index = 0; index < cart.items.length; index++) {\n    const cartItem: CartItem = cart.items[index];\n    \n    // Check if the selection and itemName match\n    if (\n      cartItem.selection === selection &&\n      cartItem.itemData.cat === 'bagel' &&\n      cartItem.itemData.name === itemName\n    ) {\n      quantity = cartItem.quantity;\n      break; // Exit the loop if the item is found\n    }else if(\n      cartItem.itemData.cat === 'spread' &&\n      cartItem.itemData.name === itemName\n    ){\n      quantity = cartItem.quantity;\n      break; // Exit the loop if the item is found\n    }else if(\n      cartItem.itemData.cat === 'pastry' &&\n      cartItem.itemData.name === itemName\n    ){\n      quantity = cartItem.quantity;\n      break;\n    }\n  };\n  return quantity;\n};\n\n\nexport const emptyCart = {\n  items: [],\n  subtotalInDollars: 0,\n  taxInDollars: 0,\n  totalQuantity: 0,\n  discountAmountInDollars: 0,\n  finalPriceInDollars: 0,\n  desiredShipDate: new Date(),\n  isGuest: false\n};\n\nexport const requestApplyMembershipPricingToCart = async function(setCart?:Function):Promise<void>{\n  const cartToken:string | null = localStorage.getItem('cartToken');\n  const loginToken:string | null = localStorage.getItem('loginToken');\n\n  if (cartToken){\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts/applyMembershipPricing`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${cartToken}`,\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    if (response.ok){\n      const responseData = await response.json();\n      localStorage.setItem('cartToken',responseData.cartToken);\n      if (setCart) setCart(responseData.cart);\n      console.log('Membership pricing successfully applied!');\n    }else{\n      console.log('User is not a member.');\n    };\n  };\n};\n\nexport const isClubCartValid = function(clubCart:Cart):boolean{\n  let totalSpreadQuantity = 0;\n  let totalBagelQuantity = 0;\n\n  clubCart.items.map((cartItem)=>{\n    switch (cartItem.itemData.cat){\n      case 'bagel':\n        totalBagelQuantity+=cartItem.quantity;\n        break;\n      case 'spread':\n        totalSpreadQuantity+=cartItem.quantity;\n        break;\n      default:\n        break;\n    };\n  });\n  return (totalSpreadQuantity===1 && totalBagelQuantity===6);\n}\n\nexport const handlePlaceClubOrder = async function(clubCart:Cart,isClubCartValid:boolean,deliveriesRemaining:number,shipDate?:Date){\n  if (!isClubCartValid){\n    alert('To place your order you must have 6 \"Two Packs\" and 1 \"1/2 LB\" spread in your cart.')\n  }else if(!shipDate){\n    alert('You must select a ship date to place your order.');\n  }else if(deliveriesRemaining<=0){\n    alert('You do not have any deliveries remaining this billing cycle.');\n  }else{\n    //request the cart token\n    const response = await fetch(`${getServerUrlPrefix()}/api/memberships/create-club-checkout-session`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`,\n        'cart-token': `Bearer ${localStorage.getItem('clubCartToken')}`\n      },\n      body:JSON.stringify({\n        shipDate: shipDate\n      })\n    });\n    const responseData = await response.json();\n    if (responseData.sessionUrl) window.location.href=responseData.sessionUrl;\n  }\n};"," // Custom email validation function\nexport const isValidEmail = (email:string):boolean => {\n  // You can use a regular expression to validate the email format\n  const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n  return regex.test(email);\n};"],"names":["AccountSettings","firstNameInput","setFirstNameInput","useState","lastNameInput","setLastNameInput","emailInput","setEmailInput","passwordInput","setPasswordInput","passwordConfInput","setPasswordConfInput","currentPasswordInput","setCurrentPasswordInput","isSignedIn","setIsSignedIn","isSidebarExpanded","setIsSidebarExpanded","cart","setCart","emptyCart","navigate","useNavigate","useEffect","verifyLoginToken","fetchAndHandleCart","fetchAccountSettings","_jsxs","_Fragment","children","_jsx","Sidebar","isExpanded","setIsExpanded","onClick","className","value","onChange","e","target","type","required","applySettingsChanges","IS_MAINTENANCE_MODE","HOME_LOADING_DELAY","getServerUrlPrefix","getClientUrlPrefix","concat","async","loginToken","localStorage","getItem","Error","response","fetch","method","headers","ok","responseData","json","firstName","lastName","email","err","console","log","isValidEmail","body","JSON","stringify","wasUserUpdated","removeItem","setItem","getResetTokenStatus","resetID","setIsExpired","isExpired","handleSubmitForgotPassword","setMessage","password","passwordConf","wasUpdated","genErrorMessageElement","errorMessage","submitLogin","setErrorMessage","errMessage","token","message","handleForgotPassword","isEmailSent","alert","submitRegister","passwordConfirmInput","isRequestSent","setIsRequestSent","passwordConfirm","window","history","back","verifyCartToken","isClub","cartTokenKey","status","isValid","requestCartToken","cartToken","setIsAdmin","setUserID","isAdmin","userID","handleLogout","getMembershipTier","setMembershipTier","setRemainingDeliveries","setExpirationDate","membershipLevel","remainingDeliveries","Date","expirationDate","toDateString","modifyCart","updatedQuantity","itemID","isRequestPending","setIsRequestPending","selection","isClubCart","undefined","handleCartItemInputChange","setCartQuantity","cartItem","newVal","parseInt","itemData","_id","getSelectionName","cat","getCartItemSubtotal","quantity","unitPriceInDollars","getItemQuantityFromCart","itemName","items","index","length","name","subtotalInDollars","taxInDollars","totalQuantity","discountAmountInDollars","finalPriceInDollars","desiredShipDate","isGuest","requestApplyMembershipPricingToCart","isClubCartValid","clubCart","totalSpreadQuantity","totalBagelQuantity","map","handlePlaceClubOrder","deliveriesRemaining","shipDate","sessionUrl","location","href","test"],"sourceRoot":""}