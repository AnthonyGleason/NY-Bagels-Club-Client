{"version":3,"file":"static/js/3085.588b6912.chunk.js","mappings":"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","sources":["Components/Register/Register.tsx","Config/clientSettings.ts","Helpers/accounts.tsx","Helpers/auth.ts","Helpers/cart.tsx","Helpers/verification.ts"],"sourcesContent":["import React,{useEffect, useRef, useState} from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Register.css';\nimport Sidebar from '../Sidebar/Sidebar';\nimport { emptyCart, fetchAndHandleCart } from '../../Helpers/cart';\nimport { Cart } from '../../Interfaces/interfaces';\nimport { genErrorMessageElement, submitRegister } from '../../Helpers/accounts';\nimport {motion} from 'framer-motion';\n\nexport default function Register(){\n  const [errorMessage,setErrorMessage] = useState<string>('');\n  \n  const [firstNameInput,setFirstNameInput] = useState<string>('');\n  const [lastNameInput,setLastNameInput] = useState<string>('');\n  const [emailInput,setEmailInput] = useState<string>('');\n  const [passwordInput,setPasswordInput] = useState<string>('');\n  const [passwordConfirmInput,setPasswordConfirmInput] = useState<string>('');\n  const [isSignedIn,setIsSignedIn] = useState<boolean>(true);\n  const [isSidebarExpanded,setIsSidebarExpanded] = useState<boolean>(false);\n  const [cart,setCart] = useState<Cart>(emptyCart);\n  const [isRequestSent,setIsRequestSent] = useState<boolean>(false);\n\n  const navigate = useNavigate();\n  \n  const isInitialLoad = useRef(true);\n  \n  useEffect(()=>{\n    if (isInitialLoad.current){\n      isInitialLoad.current=false;\n      fetchAndHandleCart(setCart);\n    };\n  },[]);\n\n  return(\n    <>\n      <Sidebar\n        cart={cart}\n        isExpanded={isSidebarExpanded} \n        setIsExpanded={setIsSidebarExpanded}\n        isSignedIn={isSignedIn}\n        setIsSignedIn={setIsSignedIn}\n      />\n      <section \n        className='register-wrapper'\n        onClick={()=>{setIsSidebarExpanded(isSidebarExpanded===true ? false: false)}}\n      >\n        <motion.form\n          initial={{ opacity: 0 }}\n          whileInView={{ opacity: 1 }}\n          transition={{duration: 3}}\n          viewport={{once: false}} \n          className='register'\n        >\n          <h3>Register</h3>\n          <div>\n            <input placeholder='First Name' value={firstNameInput} onChange={(e)=>{setFirstNameInput(e.target.value)}} type='text' min={1} required/>\n          </div>\n          <div>\n            <input placeholder='Last Name' value={lastNameInput} onChange={(e)=>{setLastNameInput(e.target.value)}} type='text' min={1} required/>\n          </div>\n          <div>\n            <input placeholder='Email' value={emailInput} onChange={(e)=>{setEmailInput(e.target.value)}} type='email' required/>\n          </div>\n          <div>\n            <input placeholder='Password' value={passwordInput} onChange={(e)=>{setPasswordInput(e.target.value)}} type='password' required/>\n          </div>\n          <div>\n            <input placeholder='Password (Again)' value={passwordConfirmInput} onChange={(e)=>{setPasswordConfirmInput(e.target.value)}} type='password' required/>\n          </div>\n          {\n            genErrorMessageElement(errorMessage)\n          }\n          <ol>\n            <li>\n              <button type='button' onClick={()=>{\n                submitRegister(\n                  emailInput,\n                  passwordInput,\n                  passwordConfirmInput,\n                  firstNameInput,\n                  lastNameInput,\n                  setErrorMessage,\n                  isRequestSent,\n                  setIsRequestSent\n                )\n              }}>Submit</button>\n            </li>\n            <li>\n              <button type='button' onClick={()=>{navigate('/login')}}>Login</button>\n            </li>\n          </ol>\n          <h4>New York Bagels Club is commited to your privacy and will not share your contact information with third parties.</h4>\n        </motion.form>\n      </section>\n    </>\n  );\n};","const USE_LOCALHOST:boolean = false; //FALSE FOR PRODUCTION\n\nexport const IS_MAINTENANCE_MODE:boolean = false;\nexport const HOME_LOADING_DELAY:number= 2000 //in milliseconds\n\nexport const getServerUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:5000');\n  }else{\n    return('https://brendels-webstore-f2339d5fa5b2.herokuapp.com');\n  };\n};\n\nexport const getClientUrlPrefix = function(){\n  if (USE_LOCALHOST){\n    return('http://localhost:3000');\n  }else{\n    return('https://anthonygleason.github.io/NY-Bagels-Club-Client')\n  };\n};\nexport const CHECKOUT_SUCCESS_REDIRECT_URL:string = `${getServerUrlPrefix()}/cart/checkout/success`;","import { getServerUrlPrefix } from \"../Config/clientSettings\";\nimport { isValidEmail } from \"./verification\";\n\nexport const fetchAccountSettings = async function(\n  setFirstNameInput?:Function,\n  setLastNameInput?:Function,\n  setEmailInput?:Function\n):Promise<void>{\n  try{\n    //ensure the user is logged in\n    const loginToken:string | null = localStorage.getItem('loginToken');\n    if (!loginToken) throw new Error('A login token was not provided! Are you logged in?');\n\n    //make the request for the user account settings\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    \n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to fetch account settings');\n    };\n\n    const responseData = await response.json();\n\n    //set the appropriate inputs if they were provided \n    if (setFirstNameInput) setFirstNameInput(responseData.firstName);\n    if (setLastNameInput) setLastNameInput(responseData.lastName);\n    if (setEmailInput) setEmailInput(responseData.email);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const applySettingsChanges = async function(\n  firstNameInput:string,\n  lastNameInput:string,\n  emailInput:string,\n  passwordInput:string,\n  passwordConfInput:string,\n  currentPasswordInput:string,\n  navigate:Function\n){\n  try{\n    //required inputs were not provided\n    if (\n      !firstNameInput || \n      !lastNameInput ||\n      !emailInput ||\n      !currentPasswordInput\n    ) throw new Error('The first name, last name, email and current password fields are required.');\n\n    if (\n      !isValidEmail(emailInput)\n    ) throw new Error('The provided email is not a valid email');\n\n    //a new password was provided but it does not match the new password confirmation\n    if (\n      passwordInput &&\n      passwordConfInput &&\n      passwordInput!==passwordConfInput\n    ) throw new Error('New passwords do not match!');\n    \n    const response = await fetch(`${getServerUrlPrefix()}/api/users/settings`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        emailInput: emailInput,\n        passwordInput: passwordInput,\n        passwordConfInput: passwordConfInput,\n        currentPasswordInput: currentPasswordInput\n      })\n    });\n\n    //verify an ok response was recieved \n    if (!response.ok) {\n      throw new Error('Failed to apply new account settings');\n    };\n\n    const responseData = await response.json();\n    \n    if (responseData.wasUserUpdated){\n      //log the user out the user was updated but a new login token wasnt created properly\n      if (!responseData.loginToken){\n        localStorage.removeItem('loginToken');\n        throw new Error('A new login token was not provided!');\n      };\n\n      //otherwise we can safely update the login token with the response data\n      localStorage.setItem('loginToken',responseData.loginToken);\n      navigate('/');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const fetchOrders = async function(setOrders:Function){\n  const loginToken:string | null = localStorage.getItem('loginToken');\n  try{\n    if (!loginToken) throw new Error('A login token was not found! Are you logged in?');\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/orders`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch orders for the current user.');\n    const responseData = await response.json();\n    if (responseData.orders) setOrders(responseData.orders);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const getResetTokenStatus = async function(\n    resetID:string,\n    setIsExpired:Function\n  ){\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'GET'\n    });\n    if (!response.ok) throw new Error('Failed to get password reset token status.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleSubmitForgotPassword = async function(\n    resetID:string,\n    passwordInput:string,\n    passwordConfInput:string,\n    setIsExpired:Function,\n    navigate:any,\n    setMessage:Function\n  ){\n  try{\n    if (!resetID || !passwordInput || !passwordConfInput) throw new Error('Required inputs are missing!');\n    if (passwordInput!==passwordConfInput) throw new Error('Passwords do not match!');\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword/${resetID}`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n      },\n      body:JSON.stringify({\n        password: passwordInput,\n        passwordConf: passwordConfInput\n      })\n    });\n    if (!response.ok) throw new Error('Failed to submit the forgot password form. Please try again later.');\n    const responseData = await response.json();\n    setIsExpired(responseData.isExpired);\n    if (responseData.wasUpdated) navigate('/login');\n    if (!responseData.isExpired) setMessage('Passwords do not match or user does not exist.');\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const genErrorMessageElement = function(errorMessage:string,){\n  //an error does not exist\n  if (!errorMessage) return null;\n  //display error\n  return(\n    <p className='login-error-message'>{errorMessage}</p>\n  );\n};\n\nexport const submitLogin = async function(emailInput:string,passwordInput:string,setErrorMessage:Function,navigate:Function){\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput){\n      const errMessage = '* Please ensure both the email and password fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/login`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput,\n        password: passwordInput,\n      }),\n    });\n\n    if (!response.ok) throw new Error('Failed to log in user.');\n\n    const responseData = await response.json();\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      //redirect user back to the last page they were on\n      // window.history.back();\n      \n      //in the future i would like to have users redirected to certain pages if they are specified in props but for now we will redirect to the home page\n      navigate('/');\n    }else{\n      setErrorMessage(responseData.message);\n      throw new Error(responseData.message);\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const handleForgotPassword = async function(emailInput:string,setErrorMessage:Function){\n  try{\n    if (!emailInput){\n      const errorMessage:string = '* The email field cannot be left blank.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    if (!isValidEmail(emailInput)){\n      const errorMessage:string = '* Please ensure you have entered a valid email.';\n      setErrorMessage(errorMessage);\n      throw new Error(errorMessage);\n    };\n\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/forgotPassword`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: emailInput\n      })\n    });\n    \n    if (!response.ok) throw new Error('Failed to request a forgot password email.');\n    const responseData = await response.json();\n    if (responseData.isEmailSent){\n      alert('Your request has been processed. If an account exists for the provided email address you will recieve an email with a password reset link.');\n    };\n  }catch(err){\n    console.log(err);\n  };\n};\n\nexport const submitRegister = async function(\n  emailInput:string,\n  passwordInput:string,\n  passwordConfirmInput:string,\n  firstNameInput:string,\n  lastNameInput:string,\n  setErrorMessage:Function,\n  isRequestSent:boolean,\n  setIsRequestSent:Function\n){\n  if (isRequestSent) return;\n  try{\n    //ensure all inputs are completed\n    if (!emailInput || !passwordInput || !passwordConfirmInput || !firstNameInput || !lastNameInput){\n      const errMessage:string = '* Please ensure all fields are completed before submitting this form.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure email is valid\n    if (!isValidEmail(emailInput)){\n      const errMessage:string = '* Please enter a valid email to submit this form';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    //ensure passwords match\n    if (passwordInput!==passwordConfirmInput){\n      const errMessage:string = '* Entered passwords do not match.';\n      setErrorMessage(errMessage);\n      throw new Error(errMessage);\n    };\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/register`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        firstName: firstNameInput,\n        lastName: lastNameInput,\n        email: emailInput,\n        password: passwordInput,\n        passwordConfirm: passwordConfirmInput,\n      })\n    });\n    setIsRequestSent(true);\n    if (!response.ok) throw new Error('An error has occured when registering the new user.');\n\n    const responseData = await response.json();\n\n    if (responseData.token){\n      localStorage.setItem('loginToken',responseData.token);\n      setIsRequestSent(true);\n      window.history.back();\n    }else{\n      setErrorMessage(responseData.message);\n      setIsRequestSent(false);\n    };\n    \n  }catch(err){\n    console.log(err);\n  };\n};","import { getServerUrlPrefix } from \"../Config/clientSettings\";\n\nexport const verifyCartToken = async function(setCart:Function, isClub?:boolean):Promise<boolean>{\n  const cartTokenKey = isClub ? 'clubCartToken' : 'cartToken';\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts/verify`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${localStorage.getItem(cartTokenKey)}`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    if (response.status!==200) throw new Error('No valid cart detected. Either the user does not have a cart token or the token expired.');\n    const responseData = await response.json();\n    setCart(responseData.cart);\n    return responseData.isValid;\n  }catch(err){\n    console.log(err);\n    return false;\n  };\n};\n\nexport const requestCartToken = async function(isClub:boolean){\n  const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts`,{\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/json',\n    },\n    body:JSON.stringify({\n      isClub: isClub\n    })\n  });\n  const responseData = await response.json();\n  if (responseData.cartToken){\n    //return the cart session token\n    return responseData.cartToken;  \n  }\n};\n\nexport const verifyLoginToken = async function(\n  setIsSignedIn?:Function,\n  setIsAdmin?:Function,\n  setUserID?:Function\n):Promise<boolean>{\n  let isValid:boolean = false;\n  //handle no login token is present\n  if (!localStorage.getItem('loginToken')){\n    if (setIsSignedIn) setIsSignedIn(false);\n    if (setIsAdmin) setIsAdmin(false);\n    return false;\n  };\n  try{\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/verify`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    const responseData = await response.json();\n    //handle 403 unauthorized\n    if (response.ok===false || response.status===403){\n      localStorage.removeItem('loginToken');\n      isValid=false;\n    }else{\n      isValid=responseData.isValid;\n    };\n    if (setIsAdmin && responseData.isAdmin===true) setIsAdmin(true);\n    if (setIsSignedIn) setIsSignedIn(isValid);\n    if (setUserID) setUserID(responseData.userID);\n    return isValid;\n  }catch(err){\n    console.log(err);\n    if (setIsAdmin) setIsAdmin(false);\n    return false;\n  };\n};\n\nexport const handleLogout = async function(setIsSignedIn?:Function){\n  await fetch(`${getServerUrlPrefix()}/api/users/logout`,{\n    method: 'POST',\n    headers:{\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n    }\n  });\n  if (setIsSignedIn) setIsSignedIn(false);\n  //remove the token locally\n  localStorage.removeItem('loginToken');\n};\n\nexport const getMembershipTier = async function(\n    setMembershipTier?:Function,\n    setRemainingDeliveries?:Function,\n    setExpirationDate?:Function\n  ):Promise<string>{\n  try{\n    if (!localStorage.getItem('loginToken')) throw new Error('You are not signed in');\n    const response = await fetch(`${getServerUrlPrefix()}/api/users/membershipLevel`,{\n      method: 'GET',\n      headers:{\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      }\n    });\n    const responseData = await response.json();\n    if (setMembershipTier) setMembershipTier(responseData.membershipLevel);\n    if (setRemainingDeliveries) setRemainingDeliveries(responseData.remainingDeliveries);\n    if (setExpirationDate) setExpirationDate(new Date(responseData.expirationDate).toDateString());\n    return responseData.membershipLevel;\n  }catch(err){\n    console.log(err+', showing non-member pricing');\n    if (setMembershipTier) setMembershipTier('Non-Member');\n    return 'Non-Member';\n  };\n};","import { getServerUrlPrefix } from \"../Config/clientSettings\";\nimport { BagelItem, Cart, CartItem, SpreadItem } from \"../Interfaces/interfaces\";\nimport { requestCartToken, verifyCartToken } from \"./auth\";\n\nexport const modifyCart = async function(\n  updatedQuantity:number,\n  itemID:string,\n  setCart:Function,\n  isRequestPending:boolean,\n  setIsRequestPending:Function,\n  selection: string,\n  isClub:boolean\n){\n  let cartTokenKey:string = '';\n  //handle not a club request & checking for undefined since isClub is optional\n  if (isClub===false){\n    cartTokenKey = 'cartToken';\n  }else{\n    cartTokenKey = 'clubCartToken';\n  };\n\n  try{\n    //handle request is already pending limited users to 1 request at a time\n    if (isRequestPending) throw new Error('A request is already pending. Please wait for the current request to complete.');\n    //set request to pending\n    setIsRequestPending(true);\n    if (!itemID || updatedQuantity<0) throw new Error('One or more required inputs were left blank.');\n    if(!cartTokenKey) throw new Error('Your request for a local storage cart token was invalid. Did you provide a isClub value to this function?');\n    //make a request to the server to update quantity for cart\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts`,{\n      method: 'PUT',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${localStorage.getItem(cartTokenKey)}`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`\n      },\n      body: JSON.stringify({\n        itemID: itemID,\n        updatedQuantity: updatedQuantity,\n        selection: selection,\n        isClubCart: isClub || undefined\n      })\n    });\n    if (response.status===510){\n      alert('You have reached the maximum allowed quantity for the selected item.');\n    };\n    //if the cart token is invalid request a fresh one and call modifyCart again\n    if (response.status===403){ //BUG WARNING IF 403 IS RETURNED WHEN YOU CANT ADD ANYTHING NEW TO YOUR CLUB CART YOU WILL BE CAUGHT IN AN ENDLESS LOOP OF 403 RESPONSES\n      //request a new cart token\n      localStorage.setItem(cartTokenKey,await requestCartToken(isClub || false));\n      modifyCart(updatedQuantity,itemID,setCart,isRequestPending,setIsRequestPending,selection,isClub);\n    };\n    if (!response.ok) throw new Error('An error occurred in the request to update the cart.');\n    const responseData = await response.json();\n\n    if (responseData.cartToken && responseData.cart){\n      //replace the cartToken in localStorage with the updated cartToken\n      localStorage.setItem(cartTokenKey,responseData.cartToken);\n      //update cart state\n      setCart(responseData.cart);\n    };\n    //allow another request to the server\n    setIsRequestPending(false);\n  }catch(err){\n    setIsRequestPending(false);\n  };\n};\n\nexport const fetchAndHandleCart = async function(setCart:Function,isClub?:boolean){\n  try {\n    const cartTokenKey = isClub ? 'clubCartToken' : 'cartToken';\n    const cartToken: string | null = localStorage.getItem(cartTokenKey);\n    // If a cart token was not found, obtain a fresh one\n    if (!cartToken) {\n      // Request a new cart token\n      localStorage.setItem(cartTokenKey, await requestCartToken(isClub || false));\n    };\n    // If a cart token exists but is invalid\n    if (!await verifyCartToken(setCart,isClub)) { //NOTE THIS VERIFYCART TOKEN IS SETTING A CART\n      localStorage.setItem(cartTokenKey, await requestCartToken(isClub || false));\n      // Because a new cart token was requested, set the cart state back to an empty array\n      setCart([]);\n    };\n  } catch (err) {\n    console.log(err);\n  };  \n};\n\nexport const getUnitPriceFromCartItem = function(storeItem:SpreadItem | BagelItem, selection?:string):number{\n  let price:number = 0;\n  if (storeItem.cat==='bagel' && selection==='two'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.twoPrice;\n  }else if (storeItem.cat==='bagel' && selection==='six'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.sixPrice;\n  }else if (storeItem.cat==='bagel' && selection==='dozen'){\n    const tempStoreItem:BagelItem = storeItem as BagelItem;\n    price = tempStoreItem.dozenPrice;\n  }else if (storeItem.cat==='spread'){\n    const tempCartItem:SpreadItem = storeItem as SpreadItem;\n    price = tempCartItem.price;\n  };\n  return price;\n};\n\nexport const handleCartItemInputChange = function(\n  e:any,\n  setCartQuantity:Function,\n  cartItem:CartItem,\n  setCart:Function,\n  isRequestPending:boolean,\n  setIsRequestPending:Function,\n  selection: string,\n  isClub:boolean\n){ //accepts an event from an input onChange \n  const newVal: number = parseInt(e.target.value);\n  //we dont want users to accidently delete their cart so lets prevent that\n  if (!newVal) {\n    setCartQuantity('');\n    return ;\n  };\n  modifyCart(\n    newVal,\n    cartItem.itemData._id,\n    setCart,\n    isRequestPending,\n    setIsRequestPending,\n    selection,\n    isClub\n  );\n};\n\nexport const getSelectionName = function(cartItem:CartItem){\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='six') return 'Six Pack(s)';\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='dozen') return \"Baker's Dozen(s)\";\n  if (cartItem.itemData.cat==='bagel' && cartItem.selection==='two') return 'Two Pack(s)';\n\n  //need to have this first because the current store items without category of spread show \n  if (cartItem.itemData.cat==='spread' && cartItem.selection==='halflb') return '1/2 LB';\n  if (cartItem.itemData.cat==='spread') return 'One Pound';\n  \n  if (cartItem.itemData.cat==='pastry') return 'Six Pack(s)';\n  if (cartItem.itemData.cat==='mystery') return 'Single(s)';\n  return 'N/A';\n};\n\nexport const getCartItemSubtotal = function(cartItem:CartItem):number{\n  return cartItem.quantity * cartItem.unitPriceInDollars;\n};\n\nexport const getItemQuantityFromCart = function(cart:Cart, itemName: string, selection?: string): number {\n  if (!cart || !cart.items) return 0;\n\n  let quantity = 0;\n\n  for (let index = 0; index < cart.items.length; index++) {\n    const cartItem: CartItem = cart.items[index];\n    \n    // Check if the selection and itemName match\n    if (\n      cartItem.selection === selection &&\n      cartItem.itemData.cat === 'bagel' &&\n      cartItem.itemData.name === itemName\n    ) {\n      quantity = cartItem.quantity;\n      break; // Exit the loop if the item is found\n    }else if(\n      cartItem.itemData.cat === 'spread' &&\n      cartItem.itemData.name === itemName\n    ){\n      quantity = cartItem.quantity;\n      break; // Exit the loop if the item is found\n    }else if(\n      cartItem.itemData.cat === 'pastry' &&\n      cartItem.itemData.name === itemName\n    ){\n      quantity = cartItem.quantity;\n      break;\n    }\n  };\n  return quantity;\n};\n\n\nexport const emptyCart = {\n  items: [],\n  subtotalInDollars: 0,\n  taxInDollars: 0,\n  totalQuantity: 0,\n  discountAmountInDollars: 0,\n  finalPriceInDollars: 0,\n  desiredShipDate: new Date(),\n  isGuest: false\n};\n\nexport const requestApplyMembershipPricingToCart = async function(setCart?:Function):Promise<void>{\n  const cartToken:string | null = localStorage.getItem('cartToken');\n  const loginToken:string | null = localStorage.getItem('loginToken');\n\n  if (cartToken){\n    const response = await fetch(`${getServerUrlPrefix()}/api/shop/carts/applyMembershipPricing`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': 'application/json',\n        'Cart-Token': `Bearer ${cartToken}`,\n        'Authorization': `Bearer ${loginToken}`\n      }\n    });\n    if (response.ok){\n      const responseData = await response.json();\n      localStorage.setItem('cartToken',responseData.cartToken);\n      if (setCart) setCart(responseData.cart);\n      console.log('Membership pricing successfully applied!');\n    }else{\n      console.log('User is not a member.');\n    };\n  };\n};\n\nexport const isClubCartValid = function(clubCart:Cart):boolean{\n  let totalSpreadQuantity = 0;\n  let totalBagelQuantity = 0;\n\n  clubCart.items.map((cartItem)=>{\n    switch (cartItem.itemData.cat){\n      case 'bagel':\n        totalBagelQuantity+=cartItem.quantity;\n        break;\n      case 'spread':\n        totalSpreadQuantity+=cartItem.quantity;\n        break;\n      default:\n        break;\n    };\n  });\n  return (totalSpreadQuantity===1 && totalBagelQuantity===6);\n}\n\nexport const handlePlaceClubOrder = async function(clubCart:Cart,isClubCartValid:boolean,deliveriesRemaining:number,shipDate?:Date){\n  if (!isClubCartValid){\n    alert('To place your order you must have 6 \"Two Packs\" and 1 \"1/2 LB\" spread in your cart.')\n  }else if(!shipDate){\n    alert('You must select a ship date to place your order.');\n  }else if(deliveriesRemaining<=0){\n    alert('You do not have any deliveries remaining this billing cycle.');\n  }else{\n    //request the cart token\n    const response = await fetch(`${getServerUrlPrefix()}/api/memberships/create-club-checkout-session`,{\n      method: 'POST',\n      headers:{\n        'Content-Type': `application/json`,\n        'Authorization': `Bearer ${localStorage.getItem('loginToken')}`,\n        'cart-token': `Bearer ${localStorage.getItem('clubCartToken')}`\n      },\n      body:JSON.stringify({\n        shipDate: shipDate\n      })\n    });\n    const responseData = await response.json();\n    if (responseData.sessionUrl) window.location.href=responseData.sessionUrl;\n  }\n};"," // Custom email validation function\nexport const isValidEmail = (email:string):boolean => {\n  // You can use a regular expression to validate the email format\n  const regex = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\n  return regex.test(email);\n};"],"names":["Register","errorMessage","setErrorMessage","useState","firstNameInput","setFirstNameInput","lastNameInput","setLastNameInput","emailInput","setEmailInput","passwordInput","setPasswordInput","passwordConfirmInput","setPasswordConfirmInput","isSignedIn","setIsSignedIn","isSidebarExpanded","setIsSidebarExpanded","cart","setCart","emptyCart","isRequestSent","setIsRequestSent","navigate","useNavigate","isInitialLoad","useRef","useEffect","current","fetchAndHandleCart","_jsxs","_Fragment","children","_jsx","Sidebar","isExpanded","setIsExpanded","className","onClick","motion","form","initial","opacity","whileInView","transition","duration","viewport","once","placeholder","value","onChange","e","target","type","min","required","genErrorMessageElement","submitRegister","getServerUrlPrefix","getClientUrlPrefix","concat","fetchAccountSettings","async","loginToken","localStorage","getItem","Error","response","fetch","method","headers","ok","responseData","json","firstName","lastName","email","err","console","log","applySettingsChanges","passwordConfInput","currentPasswordInput","isValidEmail","body","JSON","stringify","wasUserUpdated","removeItem","setItem","getResetTokenStatus","resetID","setIsExpired","isExpired","handleSubmitForgotPassword","setMessage","password","passwordConf","wasUpdated","submitLogin","errMessage","token","message","handleForgotPassword","isEmailSent","alert","passwordConfirm","window","history","back","verifyCartToken","isClub","cartTokenKey","status","isValid","requestCartToken","cartToken","verifyLoginToken","setIsAdmin","setUserID","isAdmin","userID","handleLogout","getMembershipTier","setMembershipTier","setRemainingDeliveries","setExpirationDate","membershipLevel","remainingDeliveries","Date","expirationDate","toDateString","modifyCart","updatedQuantity","itemID","isRequestPending","setIsRequestPending","selection","isClubCart","undefined","handleCartItemInputChange","setCartQuantity","cartItem","newVal","parseInt","itemData","_id","getSelectionName","cat","getCartItemSubtotal","quantity","unitPriceInDollars","getItemQuantityFromCart","itemName","items","index","length","name","subtotalInDollars","taxInDollars","totalQuantity","discountAmountInDollars","finalPriceInDollars","desiredShipDate","isGuest","requestApplyMembershipPricingToCart","isClubCartValid","clubCart","totalSpreadQuantity","totalBagelQuantity","map","handlePlaceClubOrder","deliveriesRemaining","shipDate","sessionUrl","location","href","test"],"sourceRoot":""}